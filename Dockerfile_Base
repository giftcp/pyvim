# syntax=docker/dockerfile:1

# Stage 1: Base image with Python dependencies
FROM python:3.12.4-slim as python-base

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1
# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

# Arguments
ARG DEBIAN_FRONTEND=noninteractive
ARG DEPENDENCIES="\
  git"

# Update package repository and install necessary packages
RUN apt-get update && apt-get install -y ${DEPENDENCIES} && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Create a non-privileged user that the app will run under.
ARG UID=10001
RUN adduser \
  --disabled-password \
  --gecos "" \
  --home "/nonexistent" \
  --shell "/sbin/nologin" \
  --no-create-home \
  --uid "${UID}" \
  appuser

# Install dependencies
COPY requirements.txt .
RUN --mount=type=cache,target=/root/.cache/pip \
  python -m pip install -r requirements.txt

# Stage 2: Neovim setup
FROM anatolelucet/neovim:0.10.1-ubuntu as neovim-base

# Assuming you need to copy some configuration or additional files for Neovim
# Copy configuration files if needed
# COPY nvim-config /root/.config/nvim

# Stage 3: Final runtime image
FROM python:3.12.4-slim

# Copy the installed Python packages and app code from the python-base stage
COPY --from=python-base /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=python-base /usr/local/bin /usr/local/bin
COPY --from=python-base /app /app

# Copy the Neovim setup from the neovim-base stage
COPY --from=neovim-base /root/.config/nvim /root/.config/nvim
COPY --from=neovim-base /usr/local/bin/nvim /usr/local/bin/nvim
COPY --from=neovim-base /usr/share/nvim /usr/share/nvim

# Set the working directory
WORKDIR /app

# Expose the port that the application listens on
EXPOSE 8000

# Switch to the non-privileged user to run the application
USER appuser

# Run the application
CMD gunicorn main:app --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000
